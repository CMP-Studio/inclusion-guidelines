---
title: Code | Accessibility Guidelines
---
## Code

### Navigation

Navigation is the way all users find the different pages available on your site. For this reason, it is imperative that navigation is accessible. By their nature, links are tab-able and all keyboard users and screen readers will read them--so, if your navigation is coded with links, a screen reader should find them.

Navigation becomes more complicated when we move to tablet and mobile views. With the general practice these days being that we condense all navigation to be hidden behind a hamburger icon, we need accessible users to be able to understand what that hamburger’s purpose is, and what to expect upon clicking on it.

#### Best Practices

##### Horizontal, Desktop Navigation

* Code your navigation using link tags.
* Put your links within an unordered list structure so that a screen reader will read out how many things are in the list to give visually impaired the most information possible about the content’s of the navigation.
* Use the semantic nav tag around your unordered list and links with an ARIA role=’navigation’ attribute.
  - Testing this navigation with Chrome Vox, we found that without an ARIA role attribute, the screen reader would not read any other aria attributes--for this reason, it seems ARIA roles are crucial for screen readers.
* Optionally, attach an ARIA label attribute to your navigation to give users of AT as much information as possible (especially if there are multiple navigations on your site).
  - Perkins School for the Blind website, for example, has three sets of navigation and uses an ARIA label and role=’navigation’ for each (the ARIA labels are: ‘Utility Navigation,’ ‘Accessibility Navigation,’ and ‘Main Navigation’).

```html
<code><p>snippet here</p></code>
```

##### Mobile Navigation

Mobile navigation often acts in very similar ways to accordions on websites. For further information, you can also look to the accordion section.

######  Mobile Trigger, Hamburger Button

* Use a button tag for your mobile navigation trigger; if you must use another HTML element, ensure that you use ARIA role=’button’ so screen readers will know it is clickable.
* If your button has only an image, icon, or vague link text, put an ARIA label on your trigger/hamburger. (Keep in mind that if you use an aria-label, a screen reader will only read the label and not the button text most times).
* For example, you can have: aria-label=’Mobile Navigation Trigger’ or ‘Open Menu.’
* Additionally, if you really want to be specific, you can toggle your button’s text between ‘Open Menu’ and ‘Close Menu’ with JavaScript.
* Add and toggle an ARIA expanded attribute to your button letting the user know if the content the button controls is expanded or not.

###### Navigation List (generally hidden)

* This should follow all of the characteristics of the horizontal menu specified above, including that is has a semantic nav tag wrapping a list of links with a `role='navigation'` attribute, and uses an `aria-label` to describe its purpose.
* If you have your navigation hidden on mobile views, use: `{display: none;}` so that screen readers can also not read it (if you use `{visibility: hidden;}`, screen readers can still sometimes read that).
* Additionally, you can use an ARIA `aria-hidden='true'` attribute to ensure screen readers will not be reading your hidden content, though this is often unnecessary if you are using `{display: none;}`*.
* If using an `aria-hidden` attribute, toggle this property upon showing and hiding the navigation.

```html
<Code Snippets>
```
### Tools &amp; Resources

* [http://www.perkins.org/](http://www.perkins.org/)
* [http://simplyaccessible.com/](http://simplyaccessible.com/)
* [https://standards.usa.gov/footers/](https://standards.usa.gov/footers/)
* [https://seesparkbox.com/foundry/ethically_accessible](https://seesparkbox.com/foundry/ethically_accessible)

\* For navigation that moves to mobile navigation, with perhaps a `display: none;` nav list, it is actually not commonly accepted to use `aria-hidden` attributes anymore. I asked someone in the a11y slack room, and they told me that "if you’re already [applying `display: none;`] to stuff, you generally won’t need [`aria-hidden`] anyway."
