---
title: Semantic HTML | Accessibility Guidelines
---
.primary-content{:id => "content"}
  %h2.page-title
    Semantic HTML

  %p When a screenreader, or any sort of assistive device scans a web page, all it gets information about is the DOM.  No styles or javascript will be read by a screenreader.  Good, structural, and semantic HTML is the key starting point towards good accessibility practices.  
  
  /%a{:href => "#", :"aria-hidden" => "true"} Lol
  %p HTML5 introduced several new semantic elements representing logical sections or components of a web app or document. None of the new elements actually “do” anything by themselves, but they provide a nicer way for web authors to define various parts of a document, and open the door for user agents and assistive technologies to use this information to enable alternate ways of viewing and navigating a page.

  %p When we write semantically correct HTML, we’re letting the browser know what type of content it’s dealing with and how that content relates to other content. By doing this, assistive technology is more easily able to do its job because it has a structure that it can work with. Screen reader software like JAWS or NVDA doesn’t just turn text into speech - it can use information in the HTML to list all of the headings on a page, give extra navigation controls to data tables, or announce how many items are in a list, among other things.

  %h3 Best Practices
  %p
    %em
      %h4 Use container elements for layout only:
    Elements like div and span are for layout only. They’re semantically meaningless, and they don’t have keyboard or touch support in any browser, and they don’t communicate anything to the accessibility API.

  %p
    %em
      %h4 Use other HTML elements the way they’re intended:
    All of the other HTML elements should be used to tell the browser what functional purpose your content serves. These other HTML elements provide meaning to the browser and assistive technology about what you’re saying on your website, so you should choose them based on what the content is - not based on how they look with graphics.


  :code
    # lang: html
    <h1>The Most Important Headline</h1>
    <article class="article-intro">
      <p>Here's a paragraph</p>
      <a class="read-more" href="/more.html">Read More</a>
    </div>


  :code
    # lang: css
    .read-more {
      color: black;
      text-decoration: underline;
    }

  %h3 More Resouces
  %a{:href => "http://simplyaccessible.com/article/pitfalls-info-relationships/"} Three common accessibility pitfalls for developers